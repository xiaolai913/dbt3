#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Jenny Zhang & Open Source Development Labs, Inc.
#
#
# 2004 July 16 : Reworked by Mark Wong
# 2004 September 28 : Turn this into a wrapper script because we don't know
#                     how long the test will execute so we collect stats
#                     until the test is done.  Because of the way things are
#                     run in the background and we wait for processs to
#                     complete, we only want to wait for the processes that
#                     are executing the queries.

DIR=`dirname $0`
. ${DIR}/mysql_profile || exit 1

echo "Starting a throughput test..."

SRCDIR=${DBT3_HOME}

USE_OPROFILE=0

clearprof () {
        sudo /usr/sbin/readprofile -m /boot/System.map -r
}

getprof () {
        sudo /usr/sbin/readprofile -n -m /boot/System.map -v | sort -grk3,4 > $OUTPUT_DIR/readprofile.txt
}

clearoprof () {
        sudo opcontrol --no-vmlinux # --vmlinux=/boot/vmlinux
        sleep 2
        sudo opcontrol --start-daemon
        sleep 2
        sudo opcontrol --start
        sleep 2
        # If opcontrol ever gets stuck here, sometimes it helps to remove
        # everything in this dir:
        # /var/lib/oprofile
        sudo opcontrol --reset
}

getoprof () {
        mkdir -p $OUTPUT_DIR/oprofile/annotate
        sudo opcontrol --dump
        sudo opreport -l -o $OUTPUT_DIR/oprofile/oprofile.txt
        sudo opcontrol --stop
        sudo opcontrol --shutdown
        sudo opannotate --source --assembly > $OUTPUT_DIR/oprofile/assembly.txt 2>&1
        sudo opannotate --source --output-dir=$OUTPUT_DIR/oprofile/annotate
	sudo opreport -l -c -p /lib/modules/`uname -r` -o ${OUTPUT_DIR}/oprofile/call-graph.txt > /dev/null 2>&1
}

TEST_ARGS=
NO_REFRESH_FLAG=

while getopts "ef:n:o:p:s:t:yz" opt; do
	case $opt in
	e) TEST_ARGS="$TEST_ARGS -e"
		;;
	f) scale_factor=$OPTARG
		;;
	n) num_stream=$OPTARG
		;;
	o) OUTPUT_DIR=$OPTARG
	   mkdir -p $OUTPUT_DIR/results
		;;
	p) PARAMETERS="${THROUGHPUT_PARAMETERS} $OPTARG"
		;;
	s) SEED_FILE=$OPTARG
		;;
	t) TAG=$OPTARG
		;;
	y) USE_OPROFILE=1
		;;
	z) NO_REFRESH_FLAG="-z"
		;;
	esac
done

SEED=`cat $SEED_FILE`
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt

RUNDIR=$OUTPUT_DIR/run
mkdir -p $RUNDIR

DBSCRIPTDIR=$SRCDIR/scripts/mysql
parsequery_dir="$SRCDIR/dbdriver/utils"

DBSTATS="$DBSCRIPTDIR/db_stats.sh"

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

#$DBSCRIPTDIR/stop_db.sh  > /dev/null 2>&1
#$DBSCRIPTDIR/dbt3-mysql-start-db -p "${PARAMETERS}" || exit 1
$DBSCRIPTDIR/dbt3-mysql-start-db -p "${PARAMETERS}" || exit 1

s_time=`$GTIME`
$DBSCRIPTDIR/dbt3-mysql-time-statistics -s -n "PERF${TAG}.THRUPUT" || exit 1

# Start collecting system statistics. 
$SRCDIR/scripts/dbt3-sysstats --outdir $OUTPUT_DIR --iter $STAT_ITER --sample $STAT_SAMPLE || exit 1

# Start collecting database statistics.
$DBSTATS $SID $OUTPUT_DIR &

# Start the streams.
$DBSCRIPTDIR/throughput_stream_wrapper.sh -f $scale_factor -t $TAG -n $num_stream $TEST_ARGS -o $OUTPUT_DIR -s ${SEED_FILE} ${NO_REFRESH_FLAG}
if [ $? -eq 1 ] ; then
  echo "throughput_stream_wrapper problem"
  exit 1
fi

# Stop collecting system statistics.
$SRCDIR/scripts/dbt3-sysstats --stop

$DBSCRIPTDIR/dbt3-mysql-time-statistics -e -n "PERF${TAG}.THRUPUT" || exit 1
e_time=`$GTIME`
diff_time=`expr $e_time - $s_time`
echo "Stream ${TAG} : Elapsed time for Throughput Test : $diff_time seconds"

# Stop the database after the test.
#$DBSCRIPTDIR/stop_db.sh || exit 1

if [ -f /proc/profile ]; then
	profname="Throughput_Test_$TAG"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Throughput_Test_$TAG"
	getoprof
fi

echo "Finishing the throughput test..."

exit 0
