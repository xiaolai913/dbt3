#!/bin/bash
#
# This file is released under the terms of the Artistic License.
# Please see the file LICENSE, included in this package, for details.
#
# Copyright (C) 2003-2006 Jenny Zhang & Open Source Development Labs, Inc.
#
# 15 July 2004: Reworked by Mark Wong

DIR=`dirname $0`
. ${DIR}/pgsql_profile || exit 1

SRCDIR=${DBT3_HOME}

clearprof () {
	sudo /usr/sbin/readprofile -m /boot/System.map-`uname -r` -r
}

getprof () {
	sudo /usr/sbin/readprofile -n -m /boot/System.map-`uname -r` -v | sort -grk3,4 > $OUTPUT_DIR/readprofile.txt
}

clearoprof () {
	sudo opcontrol --vmlinux=/boot/vmlinux
	sleep 2
	sudo opcontrol --start-daemon
	sleep 2
	sudo opcontrol --start
	sleep 2
	# If opcontrol ever gets stuck here, sometimes it helps to remove
	# everything in this dir:
	# /var/lib/oprofile
	sudo opcontrol --reset
}

getoprof () {
	mkdir -p $OUTPUT_DIR/oprofile/annotate
	sudo opcontrol --dump
	sudo opreport -l -o $OUTPUT_DIR/oprofile/oprofile.txt
	sudo opcontrol --stop
	sudo opcontrol --shutdown
	sudo opannotate --source --assembly > $OUTPUT_DIR/oprofile/assembly.txt 2>&1
	sudo opannotate --source --output-dir=$OUTPUT_DIR/oprofile/annotate
	sudo opreport -l -c -p /lib/modules/`uname -r` -o ${OUTPUT_DIR}/oprofile/call-graph.txt > /dev/null 2>&1
}

EXPLAIN_ANALYZE=0
USE_OPROFILE=0
NO_REFRESH=0

# process the command line parameters
while getopts "ef:l:p:o:s:t:yz" opt; do
	case $opt in
		e) EXPLAIN_ANALYZE=1
			;;
		f) SCALE_FACTOR=$OPTARG
			;;
		l) DBPORT=$OPTARG
			;;
		o) OUTPUT_DIR=$OPTARG
		   mkdir -p $OUTPUT_DIR/results
			;;
		p) PARAMETERS="${POWER_PARAMETERS} $OPTARG"
			;;
		s) SEED_FILE=$OPTARG
			;;
		t) TAG=$OPTARG
			;;
		y) USE_OPROFILE=1
			;;
		z) NO_REFRESH=1
			;;
		?) echo "Usage: $0 -f <SCALE_FACTOR> [-e -p <db_params> -t <tag> -y]"
			exit ;;
		esac
done

RUNDIR=$OUTPUT_DIR/run
mkdir -p $RUNDIR

SCRIPTDIR=$SRCDIR/scripts
DBSCRIPTDIR=$SRCDIR/scripts/pgsql

param_file="$RUNDIR/power_plan.para"
query_file="$RUNDIR/power_plan.sql"
tmp_query_file="$RUNDIR/tmp_power_plan.sql"

DBSTATS="${DBSCRIPTDIR}/db_stats.sh"

# Generate queries for the Power test.
SEED=`cat $SEED_FILE`
echo "Seed : $SEED" > $OUTPUT_DIR/readme.txt
${QGEN} -c -r $SEED -p 0 -s $SCALE_FACTOR -l $param_file -x > $query_file

# Get the EXPLAIN plans for only the SELECT statements.
PLANDIR=$OUTPUT_DIR/db/plans
mkdir -p $PLANDIR
i=1
while [ $i -le 22 ]
do
	if [ $i -ne 15 ]; then
		${DBSCRIPTDIR}/get_query_plan.sh ${SCALE_FACTOR} ${i} \
				${PLANDIR}/power_query${i}.txt ${RUNDIR} ${SEED_FILE} ${DBPORT}
	fi
	let "i=$i+1"
done
# Modify query file so that the commands are in one line.
${PARSE_QUERY} $query_file $tmp_query_file E

$DBSCRIPTDIR/dbt3-pgsql-stop-db || exit 1
$DBSCRIPTDIR/dbt3-pgsql-start-db -o ${OUTPUT_DIR} -p "${PARAMETERS}" || exit 1

# Start collecting system statistics.
$SRCDIR/scripts/dbt3-sysstats --outdir $OUTPUT_DIR --iter $STAT_ITER --sample $STAT_SAMPLE || exit 1

# Collect database statistics
${DBSTATS} ${OUTPUT_DIR} ${DBPORT} &

# Clear the read profile counters.
if [ -f /proc/profile ]; then
	clearprof
fi

# Clear the oprofile counters.
if [ $USE_OPROFILE -eq 1 ]; then
	clearoprof
fi

s_time_power=`$GTIME`
$DBSCRIPTDIR/record_start.sh -l ${DBPORT} -n "PERF${TAG}.POWER" || exit 1

if [ ${NO_REFRESH} -eq 0 ]; then
	# Refresh Stream 1
	echo "`date`: Power Test : Starting Refresh Stream 1" 
	s_time=`$GTIME`
	$DBSCRIPTDIR/record_start.sh -l ${DBPORT} \
			-n "PERF${TAG}.POWER.RF1" || exit 1
	${DBSCRIPTDIR}/run_rf1.sh ${SCALE_FACTOR} ${RUNDIR} \
			${DBPORT} > ${OUTPUT_DIR}/results/power.perf${TAG}.rf1.result 2>&1 || exit 1
	${DBSCRIPTDIR}/record_end.sh -l ${DBPORT} \
			-n "PERF${TAG}.POWER.RF1" || exit 1
	e_time=`$GTIME`
	echo "`date`: Power Test : Refresh Stream 1 completed." 
	let "diff_time=$e_time-$s_time"
fi

# Execute the queries.
${DBSCRIPTDIR}/run_power_query.sh ${SCALE_FACTOR} ${TAG} ${EXPLAIN_ANALYZE} \
		${OUTPUT_DIR} ${RUNDIR} ${SEED_FILE} ${DBPORT} || exit 1

if [ ${NO_REFRESH} -eq 0 ]; then
	# Refresh Stream 2
	echo "`date`: Power Test : Starting Refresh Stream 2" 
	s_time=`$GTIME`
	${DBSCRIPTDIR}/record_start.sh -l ${DBPORT} \
			-n "PERF${TAG}.POWER.RF2" || exit 1
	${DBSCRIPTDIR}/run_rf2.sh ${RUNDIR} \
			${DBPORT} > ${OUTPUT_DIR}/results/power.perf${TAG}.rf2.result 2>&1 || exit 1
	${DBSCRIPTDIR}/record_end.sh -l ${DBPORT} \
			-n "PERF${TAG}.POWER.RF2" || exit 1
	e_time=`$GTIME`
	echo "`date`: Power Test : Refresh Stream 2 completed." 
	let "diff_time=$e_time-$s_time"
fi

${DBSCRIPTDIR}/record_end.sh -l ${DBPORT} -n "PERF${TAG}.POWER" || exit 1
e_time_power=`$GTIME`
echo "`date`: Power Test completed."
let "diff_time=$e_time_power-$s_time_power"
echo "Elapsed time for Power Test : $diff_time seconds"

# Stop collecting system statistics.
$SRCDIR/scripts/dbt3-sysstats --stop

$DBSCRIPTDIR/dbt3-pgsql-stop-db || exit 1

if [ -f /proc/profile ]; then
	profname="Power_Test_$TAG"
	getprof
fi

if [ $USE_OPROFILE -eq 1 ]; then
	profname="Power_Test_$TAG"
	getoprof
fi

exit 0
